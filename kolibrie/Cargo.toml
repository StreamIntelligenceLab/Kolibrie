[package]
name = "kolibrie"
version = "0.1.0"
authors = ["Volodymyr Kadzhaia <vkadzhaia@gmail.com>", "Pieter Bonte <pieter.bonte@kuleuven.be>"]
description = """
A SPARQL database and RDF toolkit
"""
edition = "2021"
license = "MPL-2.0"
categories = ["database", "database-implementations", "data-structures"]
keywords = ["database", "rdf", "graph-database", "sparql", "sql"]
readme = "README.md"
exclude = ["target/"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

build = "build.rs"

[dependencies]
quick-xml = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
regex = { workspace = true }
rand = { workspace = true }
rayon = { workspace = true }
nom = { workspace = true }
url = { workspace = true }
percent-encoding = { workspace = true }
httparse = { workspace = true }
crossbeam = { workspace = true }
pyo3 = { workspace = true }
gpu = { path = "../gpu" }
shared = { path = "../shared" }
datalog =  { path = "../datalog" }
rsp = { path = "../rsp" }
ml = { path = "../ml" }
chrono = "0.4.40"
rumqttc = "0.21.0"
rustc-hash = "2.1.1"

[target.'cfg(unix)'.dependencies]
libc = "0.2.161"

[target.'cfg(windows)'.dependencies]
winapi = { version = "0.3.9", features = ["sysinfoapi"] }

[dev-dependencies]
criterion = "0.5.1"

[lib]
path = "src/lib.rs"

[features]
# When the "cuda" feature is enabled, all CUDA code is compiled in
cuda = []

[[bench]]
name = "my_benchmark"
path = "benches/my_benchmark.rs"
harness = false

[[example]]
name = "automate_policy"
path = "examples/policy/automate_policy.rs"

[[example]]
name = "real_dataset"
path = "examples/real_dataset/real_dataset.rs"

[[example]]
name = "turtle"
path = "examples/turtle/turtle_example.rs"

[[example]]
name = "gen_data"
path = "examples/synthetic_data/gen_data.rs"

[[example]]
name = "sparql_syntax"
path = "examples/sparql_syntax/sparql_syntax.rs"

[[example]]
name = "http_check"
path = "examples/http_test/http_check.rs"

[[example]]
name = "advanced_join"
path = "examples/sparql_syntax/advanced_join/advanced_join.rs"

[[example]]
name = "advanced_sparql"
path = "examples/sparql_syntax/advanced_sparql/advanced.rs"

[[example]]
name = "aggregate_sum"
path = "examples/sparql_syntax/aggregate_function/sum.rs"

[[example]]
name = "aggregate_min"
path = "examples/sparql_syntax/aggregate_function/min.rs"

[[example]]
name = "aggregate_avg"
path = "examples/sparql_syntax/aggregate_function/avg.rs"

[[example]]
name = "filter_int"
path = "examples/sparql_syntax/filter/filter_int.rs"

[[example]]
name = "filter_limit"
path = "examples/sparql_syntax/filter/filter_limit.rs"

[[example]]
name = "filter_orderby"
path = "examples/sparql_syntax/filter/filter_with_orderby.rs"

[[example]]
name = "filter_int_arithm"
path = "examples/sparql_syntax/filter/filter_int_arithmetic.rs"

[[example]]
name = "simple_filter"
path = "examples/sparql_syntax/filter/simple_filter.rs"

[[example]]
name = "filter_char"
path = "examples/sparql_syntax/filter/filter_char.rs"

[[example]]
name = "filter_complex"
path = "examples/sparql_syntax/filter/filter_complex.rs"

[[example]]
name = "knowledge_graph"
path = "examples/sparql_syntax/knowledge_graph/knowledge_graph.rs"

[[example]]
name = "kg_test_scenarios"
path = "examples/sparql_syntax/knowledge_graph/knowledge_graph_test_scenarios.rs"

[[example]]
name = "datalog_example"
path = "examples/sparql_syntax/knowledge_graph/datalog_example.rs"

[[example]]
name = "hierarchy_reasoning_advanced"
path = "examples/sparql_syntax/knowledge_graph/hierarchy_reasoning_advanced.rs"

[[example]]
name = "hierarchy_reasoning"
path = "examples/sparql_syntax/knowledge_graph/hierarchy_reasoning.rs"

[[example]]
name = "contradictions"
path = "examples/sparql_syntax/knowledge_graph/contradictions.rs"

[[example]]
name = "n_triples_data"
path = "examples/sparql_syntax/n_triples_data/n_triples_data.rs"

[[example]]
name = "n_triple_10M"
path = "examples/sparql_syntax/n_triples_data/n_triple_10M.rs"

[[example]]
name = "n3_data_simple"
path = "examples/sparql_syntax/n3_data/n3_data.rs"

[[example]]
name = "n3_data_advanced"
path = "examples/sparql_syntax/n3_data/n3_data_advanced.rs"

[[example]]
name = "select_all"
path = "examples/sparql_syntax/select_all/select_all.rs"

[[example]]
name = "simple_join"
path = "examples/sparql_syntax/simple_join/simple_join.rs"

[[example]]
name = "simple_select_synth_data"
path = "examples/sparql_syntax/simple_select/simple_select_synth_data.rs"

[[example]]
name = "simple_select"
path = "examples/sparql_syntax/simple_select/simple_select.rs"

[[example]]
name = "values"
path = "examples/sparql_syntax/values_keyword/values.rs"

[[example]]
name = "insert"
path = "examples/sparql_syntax/insert/insert.rs"

[[example]]
name = "multi_thread"
path = "examples/sparql_syntax/from_file/multi_thread.rs"

[[example]]
name = "one_thread"
path = "examples/sparql_syntax/from_file/one_thread.rs"

[[example]]
name = "cuda_example"
path = "examples/sparql_syntax/from_file/cuda_example.rs"

[[example]]
name = "udf"
path = "examples/sparql_syntax/user_defined_function/udf.rs"

[[example]]
name = "concat"
path = "examples/sparql_syntax/concat/concat.rs"

[[example]]
name = "volcano"
path = "examples/sparql_syntax/volcano_optimizer/volcano.rs"

[[example]]
name = "select_semicolon"
path = "examples/sparql_syntax/select_semicolon/select_semicolon.rs"

[[example]]
name = "nested_query"
path = "examples/sparql_syntax/nested_query/nested_query.rs"

[[example]]
name = "combination"
path = "examples/sparql_syntax/combination/combination.rs"

[[example]]
name = "combination_stream"
path = "examples/sparql_syntax/combination/combination_stream.rs"

[[example]]
name = "continious_stream"
path = "examples/sparql_syntax/combination/continious_stream.rs"

[[example]]
name = "combination_logic_extend"
path = "examples/sparql_syntax/combination/combination_logic_extend.rs"

[[example]]
name = "combination_ml"
path = "examples/sparql_syntax/combination/combination_ml.rs"

[[example]]
name = "combination_ml_savings"
path = "examples/sparql_syntax/combination/combination_ml_savings.rs"

[[example]]
name = "combination_ml_change_conclusion"
path = "examples/sparql_syntax/combination/combination_ml_change_conclusion.rs"

[[example]]
name = "multiple_conclusions"
path = "examples/sparql_syntax/combination/multiple_conclusions.rs"

[[example]]
name = "retrieve_rsp"
path = "examples/sparql_syntax/rsp_ql_syntax/retrieve.rs"

[[example]]
name = "real_scenario"
path = "examples/real_scenario/real_scenario.rs"

[[example]]
name = "mqtt_example"
path = "examples/real_scenario/mqtt_example.rs"

[[example]]
name = "mqtt_real_scenario"
path = "examples/real_scenario/mqtt_real_scenario.rs"
